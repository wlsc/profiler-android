package de.tudarmstadt.informatik.tk.assistance.profiler.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.assistance.profiler.db.Measurement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "measurement".
*/
public class MeasurementDao extends AbstractDao<Measurement, Long> {

    public static final String TABLENAME = "measurement";

    /**
     * Properties of entity Measurement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Power = new Property(1, Float.class, "power", false, "POWER");
        public final static Property Memory = new Property(2, Long.class, "memory", false, "MEMORY");
        public final static Property CpuLoad = new Property(3, Float.class, "cpuLoad", false, "CPU_LOAD");
        public final static Property Timestamp = new Property(4, long.class, "timestamp", false, "TIMESTAMP");
    };


    public MeasurementDao(DaoConfig config) {
        super(config);
    }
    
    public MeasurementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"measurement\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POWER\" REAL," + // 1: power
                "\"MEMORY\" INTEGER," + // 2: memory
                "\"CPU_LOAD\" REAL," + // 3: cpuLoad
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 4: timestamp
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_measurement__id ON measurement" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"measurement\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Measurement entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float power = entity.getPower();
        if (power != null) {
            stmt.bindDouble(2, power);
        }
 
        Long memory = entity.getMemory();
        if (memory != null) {
            stmt.bindLong(3, memory);
        }
 
        Float cpuLoad = entity.getCpuLoad();
        if (cpuLoad != null) {
            stmt.bindDouble(4, cpuLoad);
        }
        stmt.bindLong(5, entity.getTimestamp());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Measurement readEntity(Cursor cursor, int offset) {
        Measurement entity = new Measurement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // power
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // memory
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // cpuLoad
            cursor.getLong(offset + 4) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Measurement entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPower(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setMemory(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCpuLoad(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setTimestamp(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Measurement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Measurement entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
